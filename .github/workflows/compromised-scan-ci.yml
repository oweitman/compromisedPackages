name: Compromised scanners CI

on:
    pull_request:
        paths:
            - 'compromised-packages.txt'
    workflow_dispatch:
        inputs:
            ref:
                description: 'Branch or tag to run against (optional)'
                required: false
                default: ''
            entries:
                description: 'Number of entries from the list to use when building test fixtures (default 3)'
                required: false
                default: '3'

permissions:
    contents: read

env:
    N: ${{ github.event.inputs.entries || '3' }}

jobs:
    linux-bash:
        name: Bash scanner (Ubuntu)
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Ensure Bash scanner is executable
              run: chmod +x ./compromised.sh

            - name: Generate test fixtures
              shell: bash
              run: |
                  set -euo pipefail
                  LIST="compromised-packages.txt"
                  N="${N:-3}"
                  mapfile -t entries < <(grep -E '^[[:space:]]*[^#[:space:]]' "$LIST" | head -n "$N")
                  if (( ${#entries[@]} == 0 )); then
                    echo "No entries found in compromised list" >&2
                    exit 1
                  fi
                  bump_ver() {
                    local v="$1"
                    if [[ "$v" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(.*)?$ ]]; then
                      local major="${BASH_REMATCH[1]}" minor="${BASH_REMATCH[2]}" patch="${BASH_REMATCH[3]}" tail="${BASH_REMATCH[4]}"
                      echo "${major}.${minor}.$((patch+1000))${tail}"
                    else
                      echo "${v}.9999"
                    fi
                  }
                  build_plock() {
                    local outfile="$1" mode="$2"
                    {
                      echo '{'
                      echo '  "name": "fixture-test",'
                      echo '  "version": "1.0.0",'
                      echo '  "lockfileVersion": 2,'
                      echo '  "requires": true,'
                      echo '  "packages": {'
                      echo '    "": { "name": "fixture-test", "version": "1.0.0" },'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "node_modules/%s": { "version": "%s" }' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  },'
                      echo '  "dependencies": {'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "%s": { "version": "%s" }' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  },'
                      echo '  "flat_versions": {'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "%s": "%s"' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  }'
                      echo '}'
                    } > "$outfile"
                  }
                  build_plock package-lock.bad.json bad
                  build_plock package-lock.good.json good

            - name: Upload fixtures (good/bad package-lock.json)
              uses: actions/upload-artifact@v4
              with:
                  name: linux-fixtures
                  path: |
                      package-lock.bad.json
                      package-lock.good.json
                  if-no-files-found: error
                  retention-days: 14

            - name: Diagnose sizes & hashes after generation (Linux)
              shell: bash
              run: |
                  set -euo pipefail
                  for f in package-lock.bad.json package-lock.good.json; do
                    echo "== $f =="
                    wc -c < "$f" | awk '{print "bytes:",$1}'
                    md5sum "$f" | awk '{print "md5:",$1}'
                    sha256sum "$f" | awk '{print "sha256:",$1}'
                    printf 'file(1): '; file -b "$f" || true
                    echo "First 128 bytes (hex):"; xxd -g 1 -l 128 "$f" || true
                    echo
                  done

            - name: Run Bash scanner on BAD fixture (with deep verify)
              shell: bash
              run: |
                  set -euo pipefail
                  cp -f package-lock.bad.json package-lock.json

                  echo "== Verify copied package-lock.json (BAD) =="
                  echo -n "bytes: "; wc -c < package-lock.json
                  echo -n "md5:   "; md5sum package-lock.json | awk '{print $1}'
                  echo -n "sha256:"; sha256sum package-lock.json | awk '{print $1}'
                  echo "cmp vs. package-lock.bad.json:"
                  if cmp -s package-lock.bad.json package-lock.json; then
                    echo "IDENTICAL"
                  else
                    echo "DIFFERS"
                    echo "--- diff -u ---"
                    diff -u package-lock.bad.json package-lock.json || true
                    echo "--- hexdump A (bad) ---"; xxd -g 1 -l 256 package-lock.bad.json || true
                    echo "--- hexdump B (used) ---"; xxd -g 1 -l 256 package-lock.json || true
                  fi
                  echo "file(1): $(file -b package-lock.json || true)"
                  echo "CR (0x0D) count:"; tr -cd '\r' < package-lock.json | wc -c | awk '{print $1}'

                  ./compromised.sh --cache-file compromised-packages.txt 2>&1 | tee bash_bad.txt

                  total=$(grep -Eo '^Total: [0-9]+' bash_bad.txt | awk '{print $2}' | tail -n1 || echo "")
                  echo "Total matches in BAD fixture: ${total:-0}"
                  if [[ -z "${total:-}" || "${total}" -lt 1 ]]; then
                    echo "Expected at least one match with BAD fixture" >&2
                    exit 1
                  fi

            - name: Upload scanned BAD file (exact input)
              uses: actions/upload-artifact@v4
              with:
                  name: linux-scanned-bad-input
                  path: package-lock.json
                  if-no-files-found: error
                  retention-days: 14

            - name: Run Bash scanner on GOOD fixture (with deep verify)
              shell: bash
              run: |
                  set -euo pipefail
                  cp -f package-lock.good.json package-lock.json

                  echo "== Verify copied package-lock.json (GOOD) =="
                  echo -n "bytes: "; wc -c < package-lock.json
                  echo -n "md5:   "; md5sum package-lock.json | awk '{print $1}'
                  echo -n "sha256:"; sha256sum package-lock.json | awk '{print $1}'
                  echo "cmp vs. package-lock.good.json:"
                  if cmp -s package-lock.good.json package-lock.json; then
                    echo "IDENTICAL"
                  else
                    echo "DIFFERS"
                    echo "--- diff -u ---"
                    diff -u package-lock.good.json package-lock.json || true
                    echo "--- hexdump A (good) ---"; xxd -g 1 -l 256 package-lock.good.json || true
                    echo "--- hexdump B (used) ---"; xxd -g 1 -l 256 package-lock.json || true
                  fi

                  ./compromised.sh --cache-file compromised-packages.txt 2>&1 | tee bash_good.txt
                  if grep -q '^Total: [1-9][0-9]*' bash_good.txt; then
                    echo "Expected zero matches with GOOD fixture" >&2
                    exit 1
                  fi
                  grep -q 'No compromised packages found in lockfiles' bash_good.txt

            - name: Upload scanned GOOD file (exact input)
              uses: actions/upload-artifact@v4
              with:
                  name: linux-scanned-good-input
                  path: package-lock.json
                  if-no-files-found: error
                  retention-days: 14

            - name: Upload logs (Linux)
              uses: actions/upload-artifact@v4
              with:
                  name: linux-logs
                  path: |
                      bash_bad.txt
                      bash_good.txt
                  if-no-files-found: error
                  retention-days: 14

    windows-pwsh:
        name: PowerShell scanner (Windows)
        runs-on: windows-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Generate test fixtures
              shell: bash
              run: |
                  set -euo pipefail
                  LIST="compromised-packages.txt"
                  N="${N:-3}"
                  mapfile -t entries < <(grep -E '^[[:space:]]*[^#[:space:]]' "$LIST" | head -n "$N")
                  if (( ${#entries[@]} == 0 )); then
                    echo "No entries found in compromised list" >&2
                    exit 1
                  fi
                  bump_ver() {
                    local v="$1"
                    if [[ "$v" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(.*)?$ ]]; then
                      local major="${BASH_REMATCH[1]}" minor="${BASH_REMATCH[2]}" patch="${BASH_REMATCH[3]}" tail="${BASH_REMATCH[4]}"
                      echo "${major}.${minor}.$((patch+1000))${tail}"
                    else
                      echo "${v}.9999"
                    fi
                  }
                  build_plock() {
                    local outfile="$1" mode="$2"
                    {
                      echo '{'
                      echo '  "name": "fixture-test",'
                      echo '  "version": "1.0.0",'
                      echo '  "lockfileVersion": 2,'
                      echo '  "requires": true,'
                      echo '  "packages": {'
                      echo '    "": { "name": "fixture-test", "version": "1.0.0" },'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "node_modules/%s": { "version": "%s" }' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  },'
                      echo '  "dependencies": {'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "%s": { "version": "%s" }' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  },'
                      echo '  "flat_versions": {'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "%s": "%s"' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  }'
                      echo '}'
                    } > "$outfile"
                  }
                  build_plock package-lock.bad.json bad
                  build_plock package-lock.good.json good

            - name: Upload fixtures (good/bad package-lock.json)
              uses: actions/upload-artifact@v4
              with:
                  name: windows-fixtures
                  path: |
                      package-lock.bad.json
                      package-lock.good.json
                  if-no-files-found: error
                  retention-days: 14

            - name: Diagnose sizes & hashes after generation (Windows)
              shell: pwsh
              run: |
                  Set-StrictMode -Version Latest
                  foreach ($f in 'package-lock.bad.json','package-lock.good.json') {
                    Write-Host "== $f =="
                    $bytes = (Get-Item $f).Length
                    "bytes: $bytes"
                    "md5:   " + (Get-FileHash -Path $f -Algorithm MD5).Hash.ToLower()
                    "sha256:" + (Get-FileHash -Path $f -Algorithm SHA256).Hash.ToLower()
                    "First 128 bytes (hex):"
                    Format-Hex -Path $f -Count 128 | Out-String | Write-Host
                    ""
                  }

            - name: Run PowerShell scanner on BAD fixture (with deep verify)
              shell: pwsh
              run: |
                  Set-StrictMode -Version Latest
                  Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
                  Copy-Item package-lock.bad.json package-lock.json -Force

                  Write-Host "== Verify copied package-lock.json (BAD) =="
                  "bytes: " + (Get-Item package-lock.json).Length
                  "md5:   " + (Get-FileHash -Path package-lock.json -Algorithm MD5).Hash.ToLower()
                  "sha256:" + (Get-FileHash -Path package-lock.json -Algorithm SHA256).Hash.ToLower()

                  # Byte-genauer Vergleich
                  $cmp = & fc.exe /b package-lock.bad.json package-lock.json
                  if ($LASTEXITCODE -eq 0) {
                    "IDENTICAL"
                  } else {
                    "DIFFERS"
                    "=== fc /b output ==="
                    $cmp | Out-String | Write-Host
                    "=== hexdump A (bad) ==="
                    Format-Hex -Path package-lock.bad.json -Count 256 | Out-String | Write-Host
                    "=== hexdump B (used) ==="
                    Format-Hex -Path package-lock.json -Count 256 | Out-String | Write-Host
                  }

                  # CR (0x0D) zählen
                  $bytes = [System.IO.File]::ReadAllBytes("package-lock.json")
                  "CR-count: " + ($bytes | Where-Object { $_ -eq 13 }).Count

                  $out = & .\compromised.ps1 -Cache "$PWD\compromised-packages.txt"
                  $text = $out -join "`n"
                  Set-Content -Path pwsh_bad.txt -Value $text -NoNewline

                  $match = [regex]::Match($text, 'Total:\s+(\d+)\s+match\(es\)')
                  if (-not $match.Success -or [int]$match.Groups[1].Value -lt 1) {
                    Write-Host $text
                    throw "Expected at least one match with BAD fixture"
                  }

            - name: Upload scanned BAD file (exact input)
              uses: actions/upload-artifact@v4
              with:
                  name: windows-scanned-bad-input
                  path: package-lock.json
                  if-no-files-found: error
                  retention-days: 14

            - name: Run PowerShell scanner on GOOD fixture (with deep verify)
              shell: pwsh
              run: |
                  Set-StrictMode -Version Latest
                  Copy-Item package-lock.good.json package-lock.json -Force

                  Write-Host "== Verify copied package-lock.json (GOOD) =="
                  "bytes: " + (Get-Item package-lock.json).Length
                  "md5:   " + (Get-FileHash -Path package-lock.json -Algorithm MD5).Hash.ToLower()
                  "sha256:" + (Get-FileHash -Path package-lock.json -Algorithm SHA256).Hash.ToLower()

                  $cmp = & fc.exe /b package-lock.good.json package-lock.json
                  if ($LASTEXITCODE -eq 0) {
                    "IDENTICAL"
                  } else
                    {
                      "DIFFERS"
                      "=== fc /b output ==="
                      $cmp | Out-String | Write-Host
                      "=== hexdump A (good) ==="
                      Format-Hex -Path package-lock.good.json -Count 256 | Out-String | Write-Host
                      "=== hexdump B (used) ==="
                      Format-Hex -Path package-lock.json -Count 256 | Out-String | Write-Host
                    }

                  $out = & .\compromised.ps1 -Cache "$PWD\compromised-packages.txt"
                  $text = $out -join "`n"
                  Set-Content -Path pwsh_good.txt -Value $text -NoNewline
                  if ($text -match 'Total:\s+([1-9]\d*)\s+match\(es\)') {
                    Write-Host $text
                    throw "Expected zero matches with GOOD fixture"
                  }
                  if ($text -notmatch 'No compromised packages found in lockfiles') {
                    Write-Host $text
                    throw "Expected the ''No compromised packages'' message in GOOD fixture"
                  }

            - name: Upload scanned GOOD file (exact input)
              uses: actions/upload-artifact@v4
              with:
                  name: windows-scanned-good-input
                  path: package-lock.json
                  if-no-files-found: error
                  retention-days: 14

            - name: Upload logs (Windows)
              uses: actions/upload-artifact@v4
              with:
                  name: windows-logs
                  path: |
                      pwsh_bad.txt
                      pwsh_good.txt
                  if-no-files-found: error
                  retention-days: 14
