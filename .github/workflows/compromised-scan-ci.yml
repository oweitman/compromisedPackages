name: Compromised scanners CI

on:
    pull_request:
        paths:
            - 'compromised-packages.txt'
    workflow_dispatch:
        inputs:
            ref:
                description: 'Branch or tag to run against (optional)'
                required: false
                default: ''
            entries:
                description: 'Number of entries from the list to use when building test fixtures (default 3)'
                required: false
                default: '3'

permissions:
    contents: read

env:
    N: ${{ github.event.inputs.entries || '3' }}

jobs:
    linux-bash:
        name: Bash scanner (Ubuntu)
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Ensure Bash scanner is executable
              run: chmod +x ./compromised.sh

            - name: Generate test fixtures
              shell: bash
              run: |
                  set -euo pipefail
                  LIST="compromised-packages.txt"
                  N="${N:-3}"
                  mapfile -t entries < <(grep -E '^[[:space:]]*[^#[:space:]]' "$LIST" | head -n "$N")
                  if (( ${#entries[@]} == 0 )); then
                    echo "No entries found in compromised list" >&2
                    exit 1
                  fi
                  bump_ver() {
                    local v="$1"
                    if [[ "$v" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(.*)?$ ]]; then
                      local major="${BASH_REMATCH[1]}" minor="${BASH_REMATCH[2]}" patch="${BASH_REMATCH[3]}" tail="${BASH_REMATCH[4]}"
                      echo "${major}.${minor}.$((patch+1000))${tail}"
                    else
                      echo "${v}.9999"
                    fi
                  }
                  build_plock() {
                    local outfile="$1" mode="$2"
                    {
                      echo '{'
                      echo '  "name": "fixture-test",'
                      echo '  "version": "1.0.0",'
                      echo '  "lockfileVersion": 2,'
                      echo '  "requires": true,'
                      echo '  "packages": {'
                      echo '    "": { "name": "fixture-test", "version": "1.0.0" },'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "node_modules/%s": { "version": "%s" }' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  },'
                      echo '  "dependencies": {'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "%s": { "version": "%s" }' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  },'
                      echo '  "flat_versions": {'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "%s": "%s"' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  }'
                      echo '}'
                    } > "$outfile"
                  }
                  build_plock package-lock.bad.json bad
                  build_plock package-lock.good.json good

            - name: Upload fixtures (good/bad package-lock.json)
              uses: actions/upload-artifact@v4
              with:
                  name: linux-fixtures
                  path: |
                      package-lock.bad.json
                      package-lock.good.json
                  if-no-files-found: error
                  retention-days: 14

            - name: Run Bash scanner on BAD fixture (should find at least one match)
              shell: bash
              run: |
                  set -euo pipefail
                  cp package-lock.bad.json package-lock.json
                  # Nur lokale Liste verwenden (kein externer Download)
                  ./compromised.sh --cache-file compromised-packages.txt 2>&1 | tee bash_bad.txt
                  total=$(grep -Eo '^Total: [0-9]+' bash_bad.txt | awk '{print $2}' | tail -n1 || echo "")
                  echo "Total matches in BAD fixture: ${total:-0}"
                  if [[ -z "${total:-}" || "${total}" -lt 1 ]]; then
                    echo "Expected at least one match with BAD fixture" >&2
                    exit 1
                  fi

            - name: Run Bash scanner on GOOD fixture (should find zero matches)
              shell: bash
              run: |
                  set -euo pipefail
                  cp package-lock.good.json package-lock.json
                  # Nur lokale Liste verwenden (kein externer Download)
                  ./compromised.sh --cache-file compromised-packages.txt 2>&1 | tee bash_good.txt
                  if grep -q '^Total: [1-9][0-9]*' bash_good.txt; then
                    echo "Expected zero matches with GOOD fixture" >&2
                    exit 1
                  fi
                  grep -q 'No compromised packages found in lockfiles' bash_good.txt

            - name: Upload logs
              uses: actions/upload-artifact@v4
              with:
                  name: linux-logs
                  path: |
                      bash_bad.txt
                      bash_good.txt
                  if-no-files-found: error
                  retention-days: 14

    windows-pwsh:
        name: PowerShell scanner (Windows)
        runs-on: windows-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Generate test fixtures
              shell: bash
              run: |
                  set -euo pipefail
                  LIST="compromised-packages.txt"
                  N="${N:-3}"
                  mapfile -t entries < <(grep -E '^[[:space:]]*[^#[:space:]]' "$LIST" | head -n "$N")
                  if (( ${#entries[@]} == 0 )); then
                    echo "No entries found in compromised list" >&2
                    exit 1
                  fi
                  bump_ver() {
                    local v="$1"
                    if [[ "$v" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)(.*)?$ ]]; then
                      local major="${BASH_REMATCH[1]}" minor="${BASH_REMATCH[2]}" patch="${BASH_REMATCH[3]}" tail="${BASH_REMATCH[4]}"
                      echo "${major}.${minor}.$((patch+1000))${tail}"
                    else
                      echo "${v}.9999"
                    fi
                  }
                  build_plock() {
                    local outfile="$1" mode="$2"
                    {
                      echo '{'
                      echo '  "name": "fixture-test",'
                      echo '  "version": "1.0.0",'
                      echo '  "lockfileVersion": 2,'
                      echo '  "requires": true,'
                      echo '  "packages": {'
                      echo '    "": { "name": "fixture-test", "version": "1.0.0" },'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "node_modules/%s": { "version": "%s" }' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  },'
                      echo '  "dependencies": {'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "%s": { "version": "%s" }' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  },'
                      echo '  "flat_versions": {'
                      for i in "${!entries[@]}"; do
                        l="${entries[$i]}"; pkg="${l%%:*}"; ver="${l#*:}"
                        ver="$(echo "$ver" | xargs)"; ver="${ver%% *}"
                        [[ "$mode" == "good" ]] && ver="$(bump_ver "$ver")"
                        printf '    "%s": "%s"' "$pkg" "$ver"
                        [[ $i -lt $((${#entries[@]}-1)) ]] && echo ',' || echo
                      done
                      echo '  }'
                      echo '}'
                    } > "$outfile"
                  }
                  build_plock package-lock.bad.json bad
                  build_plock package-lock.good.json good

            - name: Upload fixtures (good/bad package-lock.json)
              uses: actions/upload-artifact@v4
              with:
                  name: windows-fixtures
                  path: |
                      package-lock.bad.json
                      package-lock.good.json
                  if-no-files-found: error
                  retention-days: 14

            - name: Run PowerShell scanner on BAD fixture (should find at least one match)
              shell: pwsh
              run: |
                  Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
                  Copy-Item package-lock.bad.json -Destination package-lock.json -Force
                  # Nur lokale Liste verwenden (kein externer Download)
                  $out = & .\compromised.ps1 -Cache "$PWD\compromised-packages.txt"
                  $text = $out -join "`n"
                  Set-Content -Path pwsh_bad.txt -Value $text -NoNewline
                  $match = [regex]::Match($text, 'Total:\s+(\d+)\s+match\(es\)')
                  if (-not $match.Success -or [int]$match.Groups[1].Value -lt 1) {
                    Write-Host $text
                    throw "Expected at least one match with BAD fixture"
                  }

            - name: Run PowerShell scanner on GOOD fixture (should find zero matches)
              shell: pwsh
              run: |
                  Copy-Item package-lock.good.json -Destination package-lock.json -Force
                  # Nur lokale Liste verwenden (kein externer Download)
                  $out = & .\compromised.ps1 -Cache "$PWD\compromised-packages.txt"
                  $text = $out -join "`n"
                  Set-Content -Path pwsh_good.txt -Value $text -NoNewline
                  if ($text -match 'Total:\s+([1-9]\d*)\s+match\(es\)') {
                    Write-Host $text
                    throw "Expected zero matches with GOOD fixture"
                  }
                  if ($text -notmatch 'No compromised packages found in lockfiles') {
                    Write-Host $text
                    throw "Expected the ''No compromised packages'' message in GOOD fixture"
                  }

            - name: Upload logs
              uses: actions/upload-artifact@v4
              with:
                  name: windows-logs
                  path: |
                      pwsh_bad.txt
                      pwsh_good.txt
                  if-no-files-found: error
                  retention-days: 14
